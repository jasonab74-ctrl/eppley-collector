name: Run Eppley Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3,5,7 * * *"   # keep whatever schedule you prefer

permissions:
  contents: write

concurrency:
  group: eppley-scraper-main
  cancel-in-progress: true

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraper
        id: scrape
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          set -euo pipefail
          python main.py --only all
          echo "SCRAPE_DONE=1" >> $GITHUB_OUTPUT

      - name: Configure git author
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Stage changes (skip if no changes)
        id: stage
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "NO_CHANGES=true" >> $GITHUB_OUTPUT
            echo "No file changes. Nothing to commit."
          else
            echo "NO_CHANGES=false" >> $GITHUB_OUTPUT
            git commit -m "Auto-update scraped data $(date -u +'%a %b %d %H:%M:%S UTC %Y')"
          fi

      - name: Pull/rebase main to avoid non-fast-forward
        if: steps.stage.outputs.NO_CHANGES == 'false'
        run: |
          set -euo pipefail
          # Try to integrate remote changes before pushing
          git fetch origin main
          # If there are remote updates, rebase onto them
          if ! git diff --quiet HEAD..origin/main; then
            echo "Remote main has new commits. Rebasing…"
            git pull --rebase origin main
          else
            echo "Remote main is unchanged since checkout."
          fi

      - name: Push with retries
        if: steps.stage.outputs.NO_CHANGES == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Retry up to 5 times in case another run races us
          for i in 1 2 3 4 5; do
            if git push origin HEAD:main; then
              echo "Push succeeded on attempt $i"
              exit 0
            fi
            echo "Push failed (attempt $i). Pull/rebase and retry after backoff…"
            git pull --rebase origin main || true
            sleep $(( i * 5 ))
          done
          echo "ERROR: failed to push after retries." >&2
          exit 1