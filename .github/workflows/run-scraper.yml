name: Run Eppley Scraper

on:
  workflow_dispatch:
  schedule:
    # adjust as you like
    - cron: "0 3,5,7 * * *"   # 03:00, 05:00, 07:00 UTC

permissions:
  contents: write   # required to push back to the repo
  actions: read

concurrency:
  group: run-eppley-scraper
  cancel-in-progress: false    # allow a later run to queue; we’ll rebase before push

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0           # we need history for rebase
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraper
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          set -euxo pipefail
          python main.py --only all
          # Ensure output directory exists even if some collectors produced nothing
          mkdir -p output
          ls -la output || true

      # --------- NEW: safe pull+rebase before pushing results ----------
      - name: Prepare git identity
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global core.autocrlf input

      - name: Stage changes (if any)
        id: stage
        run: |
          set -euxo pipefail
          # Add only the files we expect to change
          git add -A output || true
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Commit results (if changed)
        if: steps.stage.outputs.changed == 'true'
        run: |
          set -euxo pipefail
          ts="$(date -u +"%a %b %d %H:%M:%S UTC %Y")"
          git commit -m "Auto-update scraped data ${ts}"

      - name: Rebase onto latest main (if changed)
        if: steps.stage.outputs.changed == 'true'
        run: |
          set -euxo pipefail
          # Make sure we’re on main and up-to-date before pushing
          git branch --show-current
          git fetch origin main
          # Auto-stash any uncommitted files (should be none after commit) and rebase
          git -c rebase.autoStash=true pull --rebase origin main

      - name: Push with retry (if changed)
        if: steps.stage.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          for attempt in 1 2 3; do
            if git push origin HEAD:main; then
              echo "Push succeeded on attempt ${attempt}."
              exit 0
            fi
            echo "Push failed (attempt ${attempt}); rebasing and retrying..."
            git fetch origin main
            git -c rebase.autoStash=true pull --rebase origin main
            sleep $((attempt * 3))
          done
          echo "Push failed after retries."
          exit 1
