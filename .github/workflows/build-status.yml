name: Build Status JSON (site)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - "output/**"
      - ".github/workflows/build-status.yml"
  schedule:
    # Daily at 08:45 UTC (~1:45 AM Phoenix)
    - cron: "45 8 * * *"
  workflow_run:
    # Auto-run after enrichment finishes successfully
    workflows: ["Enrich Corpus (WP deep + YT transcripts + CR/OpenAlex + PubMed + Pack)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: build-status
  cancel-in-progress: false

jobs:
  status:
    # If triggered by workflow_run, only proceed on success
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install lightweight deps (jq not required)
        run: |
          python -m pip install --upgrade pip

      - name: Generate output/status.json
        env:
          REPO_SLUG: ${{ github.repository }}
        run: |
          python - <<'PY'
          from __future__ import annotations
          import csv, json, os
          from pathlib import Path
          from datetime import datetime, timezone

          REPO = os.environ.get("REPO_SLUG","")
          ROOT = Path(".")
          OUT  = ROOT / "output"
          OUT.mkdir(parents=True, exist_ok=True)
          status_path = OUT / "status.json"

          MANIFEST = [
            ("wordpress_fulltext.csv",   "WordPress full-text (deep crawl)"),
            ("pubmed_eppley.csv",        "Publications (PubMed)"),
            ("crossref_works.csv",       "Crossref-indexed works"),
            ("openalex_works.csv",       "OpenAlex-identified works"),
            ("youtube_metadata.csv",     "YouTube metadata"),
            ("youtube_transcripts.csv",  "YouTube transcripts"),
            ("eppley_master.csv",        "Unified master dataset"),
          ]

          def count_rows(p: Path) -> int:
            try:
              with p.open("r", encoding="utf-8", newline="") as f:
                r = csv.reader(f)
                n = -1
                for _ in r: n += 1
                return max(n, 0)    # exclude header
            except Exception:
              return 0

          files = []
          total = 0
          for name, label in MANIFEST:
            p = OUT / name
            exists = p.exists()
            size = p.stat().st_size if exists else 0
            rows = count_rows(p) if exists else 0
            updated = (datetime.fromtimestamp(p.stat().st_mtime, tz=timezone.utc).isoformat()
                       if exists else None)
            raw = f"https://raw.githubusercontent.com/{REPO}/main/output/{name}"
            web = f"https://github.com/{REPO}/blob/main/output/{name}"

            files.append({
              "name": name,
              "label": label,
              "path": f"output/{name}",
              "exists": exists,
              "updated_at": updated,
              "size_bytes": size,
              "size_mb": round(size/(1024*1024), 3) if size else 0.0,
              "rows": rows,
              "new_rows_since_last_run": 0,
              "raw_url": raw,
              "webpage_url": web,
              "download_url": raw,
              "status": ("ok" if (exists and rows>0) else ("warn" if exists else "missing")),
            })
            if name != "eppley_master.csv":
              total += rows

          payload = {
            "repo": REPO,
            "generated_at": datetime.now(timezone.utc).isoformat(),
            "files": files,
            "total_records": total
          }
          status_path.write_text(json.dumps(payload, indent=2), encoding="utf-8")
          print(f"[status] wrote {status_path} (total_records={total})")
          PY

      - name: Server-render index.html (embed fresh counts & cache-proof links)
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA:        ${{ github.sha }}
        run: |
          if [ -f scripts/render_index.py ]; then
            python scripts/render_index.py
          else
            echo "scripts/render_index.py not found; skipping render."
          fi

      - name: Commit status + index (only if changed)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output/status.json index.html || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "site: refresh status.json and index.html [skip ci]"
            git push
          fi